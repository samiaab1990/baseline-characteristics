[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(shinyjs)\r\nlibrary(dplyr)\r\nlibrary(gtsummary)\r\nlibrary(gt)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  \r\n  # Use shinyjs\r\n  shinyjs::useShinyjs(),\r\n  \r\n  # Stylesheets \r\n  tags$style(\"body {font-family: 'Roboto', sans-serif;}\"),\r\n  \r\n  # Application title\r\n  tags$head(HTML(\"<h1><b>Baseline Characteristics Table Generator<\/b><\/h1>\")),\r\n  \r\n  # Initial app tags plus description\r\n  tags$h2(HTML(\"<b>Upload Dataset<\/b>\")),\r\n  tags$p(HTML(\"Upload your dataset here. Make ensure that your dataset is <b>formatted so that each cell corresponds to one row and one column<\/b> (no nested columns) and is <b>saved as a .csv or .xlsx file<\/b>. <b>Please de-identify data<\/b>, <b> filter to only columns needed for the baseline characteristics <\/b> and <b>ensure there are no password protections on your file<\/b>. If your data contains sensitive information or a rare situation which can make a patient easily identifiable, please use an alternative method for generating baseline characteristics.\")), \r\n  fileInput(\"upload\", NULL, buttonLabel = \"Upload File üìÅ\", accept=c(\".csv\",\".xlsx\")),\r\n\r\n  # Data preview\r\n  # hide until file is uploaded\r\n  hidden(tags$h2(HTML(\"<b>Preview Data<\/b>\"),id=\"preview_data\")),\r\n  hidden(numericInput(\"n\", \"Show Number of Rows\", value = 5, min = 1, step = 1)),\r\n  tableOutput(\"head\"),\r\n  \r\n  # Table specs\r\n  # hide until file is uploaded \r\n  hidden(tags$h2(HTML(\"<b>Table Specifications<\/b>\"), id=\"specs_title\")),\r\n  \r\n  # covariates and group, will show when rendered\r\n  ui<-fluidPage(\r\n    uiOutput(\"covariates\")\r\n  ),\r\n  \r\n  ui<-fluidPage(\r\n    uiOutput(\"group\")\r\n  ),\r\n  \r\n  # test input\r\n  ui<-fluidPage(\r\n    hidden(selectInput(\r\n      \"test\",\r\n      \"Test Type (for continuous data)\",\r\n      choices = c(\"wilcox.test\",\"t.test\"),\r\n      selected = \"wilcox.test\",\r\n      multiple = FALSE,\r\n      selectize = TRUE,\r\n      width = NULL,\r\n      size = NULL\r\n    )\r\n  )),\r\n  \r\n  hidden(actionButton(\"generate\", \"Click to Generate Table\")),\r\n\r\n  \r\n  gt_output(\"baseline_characteristics\"),\r\n  \r\n\r\n  hidden(downloadButton(\"download\"))\r\n)\r\n\r\n\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n  data <- reactive({\r\n    req(input$upload)\r\n    \r\n    ext <- tools::file_ext(input$upload$name)\r\n    switch(ext,\r\n           csv = vroom::vroom(input$upload$datapath, delim = \",\"),\r\n           xlsx = readxl::read_xlsx(input$upload$datapath),\r\n           validate(\"Invalid file; Please upload a .csv or .xlsx file\")\r\n    )\r\n    \r\n  })\r\n  \r\n\r\n  observeEvent(input$upload, \r\n    {\r\n      if(length(data()) != 0)\r\n      {\r\n        show(\"preview_data\")\r\n        show(\"n\")\r\n        show(\"specs_title\")\r\n        show(\"test\")\r\n        show(\"generate\")\r\n      }\r\n                 \r\n    })\r\n  \r\n  output$head <- renderTable({\r\n    head(data(), input$n)})\r\n      \r\n      output$covariates<-renderUI({\r\n        selectInput(\r\n          \"characteristics\",\r\n          \"Covariates\",\r\n          choices = colnames(data()),\r\n          selected = NULL,\r\n          multiple = TRUE,\r\n          selectize = TRUE,\r\n          width = NULL,\r\n          size = NULL\r\n        )})\r\n      \r\n      output$group<-renderUI({\r\n        selectInput(\r\n          \"group\",\r\n          \"Group\",\r\n          choices = colnames(data()),\r\n          selected = NULL,\r\n          multiple = FALSE,\r\n          selectize = TRUE,\r\n          width = NULL,\r\n          size = NULL\r\n        )}\r\n      )\r\n      \r\n      \r\n      final_table<-eventReactive(\r\n        input$generate,\r\n        {\r\n          req(input$characteristics)\r\n          req(input$group)\r\n          \r\n          data() %>% \r\n            tbl_summary(\r\n              include = input$characteristics,\r\n              by = input$group,\r\n              type = list(where(is.numeric) ~ \"continuous2\",\r\n                          all_dichotomous() ~ \"categorical\"),\r\n              statistic = \r\n               where(is.numeric) ~ c(\"{mean} ({sd})\", \"{median} ({p25}, {p75})\"),\r\n              missing_text = \"Missing\", \r\n            ) %>%\r\n            add_overall(last=TRUE) %>%\r\n            add_p(\r\n              test = list(where(is.numeric) ~ input$test) \r\n            ) %>%\r\n            bold_labels()\r\n          \r\n          \r\n        })\r\n      \r\n      output$baseline_characteristics<-gt::render_gt(\r\n        final_table() %>% as_gt())\r\n      \r\n      observeEvent(input$generate,\r\n                   \r\n      {\r\n        if(length(final_table()) != 0)\r\n          show(\"download\")\r\n      })\r\n      \r\n      output$download<-\r\n        downloadHandler(\r\n          \r\n          filename = function()\r\n            {\"baseline_characteristics.docx\"},\r\n          \r\n          content = function(file)\r\n            gt::gtsave(final_table() %>% as_gt(),file)\r\n          \r\n        )\r\n  \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"}]
